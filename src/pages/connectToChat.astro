<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Connexion</title>
  <style>
    :root {
      --color-primary: #4CAF50;
      --color-secondary: #2E7D32;
      --color-accent: #81C784;
      --color-light: #E8F5E9;
      --color-gradient-start: rgba(76, 175, 80, 0.8);
      --color-gradient-end: rgba(46, 125, 50, 0.9);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background-color: var(--color-light);
      height: 100vh;
      display: grid;
      place-items: center;
      background: linear-gradient(135deg, var(--color-light), #ffffff);
      overflow: hidden;
    }

    .pseudocontainer {
      width: 100%;
      max-width: 400px;
      padding: 2.5rem;
      border-radius: 12px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      background: #ffffff;
      position: relative;
      display: grid;
      gap: 1.8rem;
      overflow: hidden;
      animation: fadeIn 0.8s ease-out;
    }

    .pseudocontainer::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
      animation: shimmer 2.5s infinite linear;
    }

    h2 {
      color: var(--color-secondary);
      font-size: 1.8rem;
      font-weight: 600;
      text-align: center;
      margin-bottom: 0.5rem;
      position: relative;
    }

    h2::after {
      content: '';
      display: block;
      width: 60px;
      height: 4px;
      background: linear-gradient(90deg, var(--color-primary), var(--color-accent));
      margin: 8px auto 0;
      border-radius: 2px;
    }

    form {
      display: grid;
      gap: 1.5rem;
    }

    input {
      width: 100%;
      padding: 0.9rem 1.2rem;
      border: 2px solid transparent;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s;
      outline: none;
    }

    input[type="text"] {
      background-color: var(--color-light);
      color: #333;
    }

    input[type="text"]:focus {
      border-color: var(--color-primary);
      box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }

    input[type="text"]::placeholder {
      color: #999;
      transition: opacity 0.3s;
    }

    input[type="text"]:focus::placeholder {
      opacity: 0.5;
    }

    input[type="submit"] {
      background: linear-gradient(135deg, var(--color-gradient-start), var(--color-gradient-end));
      color: white;
      font-weight: 600;
      cursor: pointer;
      border: none;
      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);
      position: relative;
      overflow: hidden;
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    input[type="submit"]:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(46, 125, 50, 0.4);
    }

    input[type="submit"]:active {
      transform: translateY(1px);
      box-shadow: 0 2px 8px rgba(46, 125, 50, 0.4);
    }

    input[type="submit"]::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 5px;
      height: 5px;
      background: rgba(255, 255, 255, 0.5);
      opacity: 0;
      border-radius: 100%;
      transform: scale(1, 1) translate(-50%);
      transform-origin: 50% 50%;
    }

    input[type="submit"]:focus::after {
      animation: ripple 1s ease-out;
    }

    /* Micro animations */
    @keyframes shimmer {
      0% { background-position: -200% 0; }
      100% { background-position: 200% 0; }
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes ripple {
      0% {
        transform: scale(0, 0);
        opacity: 0.8;
      }
      100% {
        transform: scale(20, 20);
        opacity: 0;
      }
    }

    /* Background visual elements */
    .bg-element {
      position: absolute;
      border-radius: 50%;
      opacity: 0.1;
      background: var(--color-primary);
      z-index: -1;
    }

    .bg-element-1 {
      width: 300px;
      height: 300px;
      top: -100px;
      right: -100px;
      animation: float 15s infinite ease-in-out;
    }

    .bg-element-2 {
      width: 200px;
      height: 200px;
      bottom: -80px;
      left: 10%;
      animation: float 20s infinite ease-in-out reverse;
    }

    @keyframes float {
      0% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(10px, -10px) rotate(2deg); }
      50% { transform: translate(0, 15px) rotate(0deg); }
      75% { transform: translate(-10px, -5px) rotate(-2deg); }
      100% { transform: translate(0, 0) rotate(0deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 480px) {
      .pseudocontainer {
        max-width: 90%;
        width: 90%;
        padding: 1.8rem;
        margin: 0 auto;
      }
      
      body {
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }
  </style>
</head>
<body>
  <div class="bg-element bg-element-1"></div>
  <div class="bg-element bg-element-2"></div>
  
  <div class="pseudocontainer">
    <h2>Connexion</h2>
    <form id="form">
      <input id="pseudo" type="text" placeholder="Pseudo" required>
      <input type="submit" value="Enregistrer">
    </form>
  </div>
  
  <script>
    const form = document.getElementById('form');
    const pseudoInput = document.getElementById('pseudo') as HTMLInputElement;
    
    // Vérifier si un pseudo existe déjà
    const pseudo = localStorage.getItem('pseudo');
    if (pseudo) {
      // Si déjà connecté, inutile de rester ici
      window.location.href = '/';
    }
    
    form?.addEventListener('submit', (e) => {
      e.preventDefault();
      const pseudo = pseudoInput?.value;
      if (pseudo) {
        localStorage.setItem('pseudo', pseudo);
        window.location.href = '/';
      }
    });

    // Micro-animation pour l'input
    const inputField = document.getElementById('pseudo');
    inputField!.addEventListener('focus', () => {
      inputField!.style.transition = 'all 0.3s';
      inputField!.style.transform = 'translateX(5px)';
      setTimeout(() => {
        inputField!.style.transform = 'translateX(0)';
      }, 200);
    });
  </script>
</body>
</html>